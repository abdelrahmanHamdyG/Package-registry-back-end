name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npx vitest --coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage

      - name: Install jq and bc
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Check Coverage > 50%
        run: |
          THRESHOLD=50
          LINES_PCT=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          FUNCTIONS_PCT=$(jq '.total.functions.pct' coverage/coverage-summary.json)
          STATEMENTS_PCT=$(jq '.total.statements.pct' coverage/coverage-summary.json)
          BRANCHES_PCT=$(jq '.total.branches.pct' coverage/coverage-summary.json)

          echo "Lines coverage: $LINES_PCT%"
          echo "Functions coverage: $FUNCTIONS_PCT%"
          echo "Statements coverage: $STATEMENTS_PCT%"
          echo "Branches coverage: $BRANCHES_PCT%"

          if (( $(echo "$LINES_PCT < $THRESHOLD" | bc -l) )) || \
             (( $(echo "$FUNCTIONS_PCT < $THRESHOLD" | bc -l) )) || \
             (( $(echo "$STATEMENTS_PCT < $THRESHOLD" | bc -l) )) || \
             (( $(echo "$BRANCHES_PCT < $THRESHOLD" | bc -l) )); then
            echo "Coverage is below ${THRESHOLD}%!"
            exit 1
          else
            echo "Coverage is above ${THRESHOLD}%!"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-coverage  # Changed from unit-tests to test-and-coverage
    if: "!contains(github.event.head_commit.message, '[skip deploy]')"  # <--- Add this line
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Using v3 for consistency
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
      - name: Sync files to EC2 using rsync
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/PackRegPh2
      - name: Run deployment script on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/PackRegPh2
            # Stop any existing server
            pkill -f "node dist/index.js" || true
            # Install project dependencies
            npm install
            # Compile TypeScript files
            npm run build
            # Start the server in the background
            nohup node dist/index.js > server.log 2>&1 &
          EOF
